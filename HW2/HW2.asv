clc;
close all;
clear;

%% Problem 1

% Sampling vectors
one_s_200 = linspace(0, 1, 200);
one_s_20 = linspace(0, 1, 20);
one_s_5 = linspace(0, 1, 5);

% Signal
sig_200 = exp(i*20*pi*one_s_200);
sig_20 = exp(i*20*pi*one_s_20);
sig_5 = exp(i*20*pi*one_s_5);

% Break out real and imaginary
sig_200_re = (sig_200 + conj(sig_200)) / 2;
sig_200_im = (sig_200 - conj(sig_200)) / 2i;

sig_20_re = (sig_20 + conj(sig_20)) / 2;
sig_20_im = (sig_20 - conj(sig_20)) / 2i;

sig_5_re = (sig_5 + conj(sig_5)) / 2;
sig_5_im = (sig_5 - conj(sig_5)) / 2i;

% Plotting
figure;
subplot(3,1,1);
title("200 Hz")
plot(one_s_200, sig_200_re, one_s_200, sig_200_im);
subplot(3,1,2);
title("20 Hz")
plot(one_s_20, sig_20_re, one_s_20, sig_20_im);
subplot(3,1,3);
title("5 Hz")
plot(one_s_5, sig_5_re, one_s_5, sig_5_im);

%% Problem 2

% Definitions
N = 2048;
data = zeros(1, N);
tau = 10^-5;
fs = 10^8; % Sampling Frequency
dt = 1/fs; % Sampling period
s = 10^12; % Chirp slope
t = -tau/2:dt:tau/2;
x = -tau/2:dt:(-tau/2 + dt*(N-1));

% Time Domain
signal = exp(1i*pi*s*t.^2);
data(1:length(signal)) = signal;
data_re = (data + conj(data))/2;
data_im = (data - conj(data))/2i;

% Frequency Domain
D = fft(data);
df = fs/N;
f = df*(-N/2:N/2-1);
Dshift = fftshift(D);
power_db = 20*log10(Dshift);

% Plotting
figure;
subplot(2,1,1)
plot(x, data_re, x, data_im)
subplot(2,1,2)
plot(f, abs(power_db))

%% Problem 3

% Definitions
tau = 1;
s = 80;
fs = 1000;
dt =  1/fs;
Ac = 1;
wc = 2*pi*100;
t = -tau/2:dt:tau/2;
N = length(t);

% Time Domain
signal = exp(1i*pi*s*t.^2);
signal_re = (signal + conj(signal)) / 2;
signal_im = (signal - conj(signal)) / 2i;

% Modulation
I_mod = signal_re.*Ac.*cos(wc*t);
Q_mod = -signal_im.*Ac.*sin(wc*t);

transmit = I_mod + Q_mod;

% Frequency Domain
fft_signal = fft(signal);
df = fs/N;
fft_signal_shift = fftshift(fft_signal);
f = df*(-N/2:N/2-1);
fft_mod = fft(transmit);
fft_mod_shift = fftshift(fft_mod);

% Plotting
figure;
subplot(3,1,1)
plot(t, transmit)
subplot(3,1,2)
plot(f, abs(fft_signal_shift))
subplot(3,1,3)
plot(f, abs(fft_mod_shift))


%% Problem 4
% Definitions carry over from above
a = 100;

% Demodulation
I_t = transmit.*2.*cos(wc*t);
Q_t = -transmit.*2.*sin(wc*t);

demod_signal = I_t + 1i*Q_t;

demod_fft = fft(demod_signal);
demod_fft_shift = fftshift(demod_fft);

% LPF
demod_fft_shift_filt = demod_fft_shift;
demod_fft_shift_filt(f > a | f < -a) = 0;

figure;
hold on;
plot(f, abs(demod_fft_shift), 'alpha', 0.5)
plot(f, abs(fftshift(fft(I_t))), 'alpha', 0.5)
plot(f, abs(fftshift(fft(Q_t))), 'alpha', 0.5)
plot(f, abs(demod_fft_shift_filt))
legend('Demodulated signal', 'I(t)', )